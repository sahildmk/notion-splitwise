import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Notion x Splitwise</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Notion x Splitwise{" "}
            <span className="text-[hsl(280,100%,70%)]">Sync</span>
          </h1>
          <div className="flex flex-col items-center gap-2">
            {/* <ReadwiseTest /> */}
            <NotionTest />
            {/* <AuthShowcase /> */}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const NotionTest: React.FC = () => {
  const result = api.notion.getUnpostedHighlights.useQuery(undefined, {
    refetchOnWindowFocus: false,
  });

  return (
    <div className="flex flex-col justify-center gap-4 text-white">
      {result.isFetching ? (
        <>Loading...</>
      ) : (
        result.data?.map((el, idx) => (
          <div key={idx}>
            <h1 className="mb-1 text-2xl font-bold">{el.highlightTitle}</h1>
            <p>{el.content}</p>
          </div>
        ))
      )}
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={() => {
          result.refetch().catch(console.error);
        }}
      >
        Test Notion Connection
      </button>
    </div>
  );
};

const ReadwiseTest: React.FC = () => {
  const result = api.readwise.getAll.useQuery();

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <button className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20">
        Test Readwise Connection
      </button>
    </div>
  );
};

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
